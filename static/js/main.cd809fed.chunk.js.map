{"version":3,"sources":["beep.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","beep","require","App","useState","breakLength","sessionLength","label","isRunning","timeLeft","timoutId","state","setState","past","Date","now","timestamp","setTimestamp","clampLength","length","useEffect","timeoutId","setTimeout","document","getElementById","play","format2Digits","value","slice","className","id","Math","floor","src","type","onClick","clearTimeout","beeper","pause","currentTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd809fed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.ba3c4203.wav\";","import React, {useState, useEffect} from 'react';\nimport './App.scss';\n\nconst beep = require(\"./beep.wav\");\n\nfunction App() {\n  const SESSION = \"Session\";\n  const BREAK = \"Break\";\n  const [state, setState] = useState({\n    breakLength: 5,\n    sessionLength: 25,\n    label: SESSION,\n    isRunning: false,\n    timeLeft: 1500,\n    timoutId: ''\n  });\n  const [timestamp, setTimestamp] = useState({past: Date.now(), now: Date.now()});\n\n  const clampLength = (length) => (length > 0 && length <= 60);\n\n  const incBreakLength = () => {\n    if (!state.isRunning && clampLength(state.breakLength + 1)) {\n      setState(state => ({\n        breakLength: state.breakLength + 1,\n        sessionLength: state.sessionLength,\n        label: state.label,\n        isRunning: state.isRunning,\n        timeLeft: state.timeLeft,\n        timeoutId: state.timeoutId\n      }));\n    }\n  };\n\n  const decBreakLength = () => {\n    if (!state.isRunning && clampLength(state.breakLength - 1)) {\n      setState(state => ({\n        breakLength: state.breakLength - 1,\n        sessionLength: state.sessionLength,\n        label: state.label,\n        isRunning: state.isRunning,\n        timeLeft: state.timeLeft,\n        timeoutId: state.timeoutId\n      }))\n    }\n  };\n\n  const incSessionLength = () => {\n    if (!state.isRunning && clampLength(state.sessionLength + 1)) {\n      setState(state => {\n        let timeLeft = state.timeLeft;\n        if (!state.isRunning) {\n          timeLeft = (state.sessionLength + 1) * 60;\n        }\n\n        return {\n          breakLength: state.breakLength,\n          sessionLength: state.sessionLength + 1,\n          label: state.label,\n          isRunning: state.isRunning,\n          timeLeft: timeLeft,\n          timeoutId: state.timeoutId\n        };\n      });\n    }\n  };\n\n  const decSessionLength = () => {\n    if (!state.isRunning && clampLength(state.sessionLength - 1)) {\n      setState(state => {\n        let timeLeft = state.timeLeft;\n        if (!state.isRunning) {\n          timeLeft = (state.sessionLength - 1) * 60;\n        }\n\n        return {\n          breakLength: state.breakLength,\n          sessionLength: state.sessionLength - 1,\n          label: state.label,\n          isRunning: state.isRunning,\n          timeLeft: timeLeft,\n          timeoutId: state.timeoutId\n        };\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (state.isRunning && Date.now() - timestamp.past >= 1000) {\n      setTimestamp({past: Date.now(), now: Date.now()});\n\n      let timeoutId = setTimeout(() => setTimestamp(timestamp => ({past: timestamp.past, now: Date.now()})), 1000);\n\n      let timeLeft = state.timeLeft;\n      let label = state.label;\n\n      if (timeLeft - 1 === 0) {\n        if (state.label === SESSION) {\n          label = BREAK;\n        } else if (state.label === BREAK) {\n          label = SESSION;\n        }\n        document.getElementById(\"beep\").play();\n      }\n\n      if (timeLeft === 0) {\n        if (state.label === SESSION) {\n          timeLeft = state.sessionLength * 60;\n        } else if (state.label === BREAK) {\n          timeLeft = state.breakLength * 60;\n        }\n      } else {\n        timeLeft--;\n      }\n\n      setState(state => {\n        return {\n          breakLength: state.breakLength,\n          sessionLength: state.sessionLength,\n          label: label,\n          isRunning: state.isRunning,\n          timeLeft: timeLeft,\n          timeoutId: timeoutId\n        };\n      });\n    } else if (state.isRunning) {\n      setTimeout(() => setTimestamp(timestamp => ({past: timestamp.past, now: Date.now()})), 1000);\n    }\n  }, [state, timestamp]);\n\n  const handleStartStopClick = () => {\n    if (state.isRunning) {\n      clearTimeout(state.timeoutId);\n      setState(state => ({\n        breakLength: state.breakLength,\n        sessionLength: state.sessionLength,\n        label: SESSION,\n        isRunning: false,\n        timeLeft: state.timeLeft,\n        timeoutId: ''\n      }));\n    } else {\n      setTimestamp(timestamp => ({past: Date.now(), now: Date.now()}));\n      setState(state => ({\n        breakLength: state.breakLength,\n        sessionLength: state.sessionLength,\n        label: state.label,\n        isRunning: true,\n        timeLeft: state.timeLeft,\n        timeoutId: state.timeoutId\n      }));\n    }\n  };\n\n  const handleResetclick = () => {\n    clearTimeout(state.timeoutId);\n    const beeper = document.getElementById(\"beep\");\n    beeper.pause();\n    beeper.currentTime = 0;\n\n    setState(state => ({\n      breakLength: 5,\n      sessionLength: 25,\n      label: SESSION,\n      isRunning: false,\n      timeLeft: 1500,\n      timeoutId: ''\n    }));\n  };\n\n  const getMinutes = () => Math.floor(state.timeLeft / 60);\n\n  const getSeconds = () => state.timeLeft % 60;\n\n  const format2Digits = (value) => (\"0\" + value).slice(-2);\n\n  return (<div className=\"container-fluid h-100 d-flex flex-column\n   justify-content-center\">\n    <div className=\"row\">\n      <div className=\"col-md-8 h1 text-white d-flex flex-column\n        justify-content-center align-items-center\">\n        <h1 id=\"timer-label\" className=\"border border-white\">{state.label}</h1>\n        <div id=\"time-left\">{`${format2Digits(getMinutes())}:${format2Digits(getSeconds())}`}</div>\n        <audio id=\"beep\">\n          <source src={beep} type=\"audio/wav\"/>\n        </audio>\n        <div className=\"d-flex flex-row px-5 py-1 border border-white\">\n          <button id=\"start_stop\" className=\"control-btns\" onClick={handleStartStopClick}>{\n              state.isRunning\n                ? <i className=\"fa fa-pause\"></i>\n                : <i className=\"fa fa-play\"></i>\n            }</button>\n          <button id=\"reset\" className=\"control-btns\" onClick={handleResetclick}>\n            <i className=\"fa fa-refresh\"></i>\n          </button>\n        </div>\n      </div>\n      <div className=\"col-md-4 text-white d-flex flex-column align-items-center\n        mt-5\">\n        <h2 id=\"break-label\">Break Length</h2>\n        <div className=\"d-flex flex-row justify-content-center align-items-center\">\n          <button id=\"break-decrement\" className=\"control-btns\" onClick={decBreakLength}>\n            <i className=\"fa fa-minus\"></i>\n          </button>\n          <span id=\"break-length\" className=\"length-value\">{state.breakLength}</span>\n          <button id=\"break-increment\" className=\"control-btns\" onClick={incBreakLength}>\n            <i className=\"fa fa-plus\"></i>\n          </button>\n        </div>\n        <h2 id=\"session-label\" className=\"mt-5\">Session Length</h2>\n        <div className=\"d-flex flex-row justify-content-center align-items-center\">\n          <button id=\"session-decrement\" className=\"control-btns\" onClick={decSessionLength}>\n            <i className=\"fa fa-minus\"></i>\n          </button>\n          <span id=\"session-length\" className=\"length-value\">{state.sessionLength}</span>\n          <button id=\"session-increment\" className=\"control-btns\" onClick={incSessionLength}>\n            <i className=\"fa fa-plus\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}